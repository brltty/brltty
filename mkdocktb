#!/bin/bash -p
###############################################################################
# BRLTTY - A background process providing access to the console screen (when in
#          text mode) for a blind person using a refreshable braille display.
#
# Copyright (C) 1995-2021 by The BRLTTY Developers.
#
# BRLTTY comes with ABSOLUTELY NO WARRANTY.
#
# This is free software, placed under the terms of the
# GNU Lesser General Public License, as published by the Free Software
# Foundation; either version 2.1 of the License, or (at your option) any
# later version. Please see the file LICENSE-LGPL for details.
#
# Web Page: http://brltty.app/
#
# This software is maintained by Dave Mielke <dave@mielke.cc>.
###############################################################################

defaultOutputRoot="doc-ktb"

. "`dirname "${0}"`/brltty-prologue.sh"
addProgramOption s string.directory sourceRoot "top-level directory of source tree" "the location of this script"
addProgramOption b string.directory buildRoot "top-level directory of build tree" "the source tree"
addProgramOption o string.directory outputRoot "top-level directory of output tree" "${defaultOutputRoot}"
addProgramOption k flag keepFiles "don't remove intermediate files"
parseProgramArguments "${@}"

set -e
umask 022
shopt -s nullglob

[ -n "${sourceRoot}" ] || sourceRoot="$(dirname "${0}")"
verifyInputDirectory "${sourceRoot}"
sourceRoot="$(cd "${sourceRoot}" && pwd)"

[ -n "${buildRoot}" ] || buildRoot="${sourceRoot}"
buildRoot="$(cd "${buildRoot}" && pwd)"

[ -n "${outputRoot}" ] || outputRoot="${defaultOutputRoot}"
verifyOutputDirectory "${outputRoot}"

unset HOME
export XDG_CONFIG_HOME=/
export XDG_CONFIG_DIRS=/

readonly newLine=$'\n'

declare -a tocLines

addTocLine() {
   local line="${1}"

   tocLines[${#tocLines[*]}]="${line}"
}

addTocEntry() {
   local title="${1}"
   local anchor="${2}"

   addTocLine "<li><a href=\"#${anchor}\">${title}</a></li>"
}

declare -a documentLines

addLine() {
   local line="${1}"

   documentLines[${#documentLines[*]}]="${line}"
}

addAnchor() {
   local anchor="${1}"

   addLine "<a name=\"${anchor}\"></a>"
}

beginDocument() {
   local title="${1}"

   headerLevel=0

   addLine "<?xml version=\"1.0\" encoding=\"utf-8\" ?>"
   addLine "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">"

   addLine "<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\">"
   addLine "<head>"
   addLine "<title>${title}</title>"
   addLine "</head>"
   addLine "<body>"
}

endDocument() {
   local file="${1}"

   addLine "</body>"
   addLine "</html>"
   addTocLine "<hr />"

   local docCount="${#documentLines[*]}"
   local docIndex=0

   local tocCount="${#tocLines[*]}"
   local tocIndex=0

   exec 3>"${file}"
      while ((docIndex < tocStart))
      do
         echo >&3 "${documentLines[docIndex++]}"
      done

      while ((tocIndex < tocCount))
      do
         echo >&3 "${tocLines[tocIndex++]}"
      done

      while ((docIndex < docCount))
      do
         echo >&3 "${documentLines[docIndex++]}"
      done
   exec 3>&-
}

beginSection() {
   local title="${1}"

   local anchor="${title,,?}"
   anchor="${anchor//[^a-zA-Z_0-9]/-}"
   addAnchor "${anchor}"

   headerLevel=$((headerLevel + 1))
   addLine "<h${headerLevel}>${title}</h${headerLevel}>"

   if ((headerLevel == 1))
   then
      tocStart="${#documentLines[*]}"
      addTocLine "<ul>"
   else
      addTocEntry "${title}" "${anchor}"
   fi
}

endSection() {
   ((headerLevel > 1)) || addTocLine "</ul>"
   headerLevel=$((headerLevel - 1))
}

beginLayoutList() {
   layoutListed=false
}

endLayoutList() {
   ! "${layoutListed}" || {
      addLine "</ul>"
   }
}

beginLayoutEntry() {
   local prefix="${1}"
   local outputExtension="${2}"

   local layout="${inputFile##*/}"
   layout="${layout%.*}"

   outputFile="${outputRoot}/${prefix}-${layout}.${outputExtension}"
}

endLayoutEntry() {
   local category="${1}"

   exec 4<"${outputFile%.*}.${plainTextExtension}"
   local description
   read -r -u 4 description
   exec 4<&-

   description="${description} "
   description="${description#*: }"
   [ -z "${category}" ] || description="${description#${category} }"
   description="${description% }"

   local prefix="All Models"
   [ -z "${description}" ] || {
      if [ "${description}" = "${description#(}" ]
      then
         prefix=""
      else
         prefix="${prefix} "
      fi
   }
   description="${prefix}${description}"

   "${layoutListed}" || {
      layoutListed=true
      addLine "<ul>"
   }

   addLine "<li><a href=\"${outputFile##*/}\">${description}</a></li>"
}

listKeyTable() {
   local prefix="${1}"

   local input="${prefix}-${inputFile##*/}"
   local output="${outputFile%.*}"
   local name="${output##*/}"

   local command=( "${keyTableLister}" -D"${buildRoot}/lib" -T"${sourceRoot}/${tablesSubdirectory}" )
   "${command[@]}" -l "${input}" >"${output}.${plainTextExtension}" || {
      rm -f "${output}.${plainTextExtension}"
      return 1
   }

   "${command[@]}" -r "${input}" >"${output}.${reStructuredTextExtension}"
   sed -e "2a\\${newLine}* \`Help Screen Version <${name}.${plainTextExtension}>\`_" -i "${output}.${reStructuredTextExtension}"

   rst2html --config "${sourceRoot}/docutils.conf" "${output}.${reStructuredTextExtension}" "${output}.${hypertextExtension}"
   "${keepFiles}" || rm "${output}.${reStructuredTextExtension}"
}

driversSubdirectory="Drivers/Braille"
driversDirectory="${sourceRoot}/${driversSubdirectory}"

tablesSubdirectory="Tables"
tablesDirectory="${sourceRoot}/${tablesSubdirectory}"

brailleSubdirectory="Input"
keyboardSubdirectory="Keyboard"

braillePrefix="brl"
keyboardPrefix="kbd"

plainTextExtension="txt"
reStructuredTextExtension="rst"
hypertextExtension="html"
keyTableExtension="ktb"

keyTableLister="${buildRoot}/Programs/brltty-ktb"
make -C "${keyTableLister%/*}" -s "${keyTableLister##*/}"

documentTitle="Key Binding Lists"
beginDocument "${documentTitle}"
beginSection "${documentTitle}"

beginSection "Computer Keyboard Bindings"
addLine "In order to use one of these keyboard tables,"
addLine "you need to explicitly specify it in one of the following ways:"
addLine "<ul>"
addLine "<li>Use BRLTTY's <tt>-k</tt> (or <tt>--keyboard-table=</tt>) command line option.</li>"
addLine "<li>Use the <tt>keyboard-table</tt> configuration file (<tt>brltty.conf</tt>) directive.</li>"
addLine "</ul>"

beginLayoutList
set -- "${tablesDirectory}/${keyboardSubdirectory}/"*".${keyTableExtension}"
for inputFile
do
   beginLayoutEntry "${keyboardPrefix}" "${hypertextExtension}"
   listKeyTable "${keyboardPrefix}" || continue
   endLayoutEntry
done
endLayoutList
addLine "<hr />"
endSection

beginSection "Braille Device Bindings"
addLine "The driver automatically selects the appropriate key table for the device model being used."
addLine "Click on the driver's name for general information about it."
addLine "Click on the device model for its key bindings."

addTocLine "<li><ul>"
addLine "<dl>"

for driverDirectory in "${driversDirectory}/"*
do
   [ -d "${driverDirectory}" ] || continue

   driverName="${driverDirectory##*/}"
   driverCode="$(sed -n '/^DRIVER_CODE *=/s/^.*= *\([^ ]*\).*$/\1/p' "${driverDirectory}/Makefile.in")"

   header="${driverName}"
   inputFile="${driverDirectory}/README"
   [ ! -f "${inputFile}" ] || {
      outputFile="${outputRoot}/${braillePrefix}-${driverCode}.${plainTextExtension}"
      cp -a -- "${inputFile}" "${outputFile}"
      header="<a href=\"${outputFile##*/}\">${header}</a>"
   }

   anchor="${braillePrefix}-${driverCode}"
   addTocEntry "${driverName}" "${anchor}"
   addLine "<dt>"
   addAnchor "${anchor}"
   addLine "${header}"
   addLine "</dt><dd>"

   beginLayoutList
   set -- "${tablesDirectory}/${brailleSubdirectory}/${driverCode}/"*".${keyTableExtension}"
   if [ "${#}" -gt 0 ]
   then
      for inputFile
      do
         beginLayoutEntry "${braillePrefix}-${driverCode}" "${hypertextExtension}"
         listKeyTable "${braillePrefix}-${driverCode}" "${hypertextExtension}" || continue
         endLayoutEntry "${driverName}"
      done
   else
      set -- "${tablesDirectory}/${brailleSubdirectory}/${driverCode}/"*".${plainTextExtension}"
      for inputFile
      do
         beginLayoutEntry "${braillePrefix}-${driverCode}" "${plainTextExtension}"
         cp -a -- "${inputFile}" "${outputFile}"
         endLayoutEntry "${driverName}"
      done
   fi

   endLayoutList
   addLine "</dd>"
done

addLine "</dl>"
addTocLine "</ul></li>"

addLine "<hr />"
endSection

endSection
endDocument "${outputRoot}/index.${hypertextExtension}"
exit 0
